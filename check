def add_image_to_db(title, file_path, position_id=None, completed_document_position_association_id=None, complete_document_id=None, description=""):
    new_image_id = None  # Initialize the new_image_id outside the session scope

    try:
        with Session() as session:
            logger.debug('Inside add_image_to_db')

            # Log the inputs for debugging
            logger.debug(f"Title: {title}")
            logger.debug(f"File Path: {file_path}")
            logger.debug(f"Position ID: {position_id}")
            logger.debug(f"Completed Document Position Association ID: {completed_document_position_association_id}")
            logger.debug(f"Complete Document ID: {complete_document_id}")
            logger.debug(f"Description: {description}")

            # Step 1: Retrieve the current image embedding model configuration
            current_image_model = load_image_model_config_from_db()
            logger.info(f"Current image model configuration from DB: {current_image_model}")

            # Step 2: Dynamically set the model handler based on the configuration
            model_handler = get_image_model_handler(current_image_model)
            logger.info(f"Using model handler: {model_handler.__class__.__name__}")

            logger.info(f'Processing image: {title}')

            # Step 3: Check if an image with the same title and description already exists
            logger.debug("Checking if an image with the same title and description already exists")
            existing_image = session.query(Image).filter(
                and_(Image.title == title, Image.description == description)
            ).first()

            if existing_image is not None and existing_image.file_path == file_path:
                logger.info(f"Image with the same title, description, and file path already exists: {title}")
                new_image = existing_image

                # Log the duplication in the failed_uploads.txt file
                error_file_path = os.path.join(DATABASE_PATH_IMAGES_FOLDER, 'failed_uploads.txt')
                with open(error_file_path, 'a') as error_file:
                    error_file.write(f"Image with title '{title}', description '{description}', and file path '{file_path}' already exists.\n")
            else:
                # Step 4: Add the new image to the database
                logger.info("Adding a new image to the database")
                new_image = Image(
                    title=title,
                    description=description,
                    file_path=file_path
                )
                session.add(new_image)
                session.commit()
                new_image_id = new_image.id  # Assign the ID to new_image_id
                logger.info(f"Added image: {title}, ID: {new_image_id}")

            # Step 5: Process the image and generate the embedding
            try:
                logger.info(f"Opening image: {file_path}")
                image = PILImage.open(file_path).convert("RGB")

                logger.info("Calling model_handler.is_valid_image()")
                if not model_handler.is_valid_image(image):
                    logger.info(f"Skipping {file_path}: Image does not meet the required dimensions or aspect ratio.")
                else:
                    logger.info("Image passed validation.")
                    model_embedding = model_handler.get_image_embedding(image)
                    model_name = model_handler.__class__.__name__

                    # Step 6: Check if the embedding already exists and add it if not
                    if model_name and model_embedding is not None:
                        logger.debug("Checking if the image embedding already exists")
                        existing_embedding = session.query(ImageEmbedding).filter(
                            and_(ImageEmbedding.image_id == new_image.id, ImageEmbedding.model_name == model_name)
                        ).first()

                        if existing_embedding is None:
                            logger.info("Creating a new ImageEmbedding entry")
                            image_embedding = ImageEmbedding(
                                image_id=new_image.id,
                                model_name=model_name,
                                model_embedding=model_embedding.tobytes()
                            )
                            session.add(image_embedding)
                            logger.info(f"Created ImageEmbedding with image ID {new_image.id}, model name {model_name}")

                    # Step 7: Handle position associations if applicable
                    if position_id:
                        logger.debug("Checking if ImagePositionAssociation already exists")
                        existing_association = session.query(ImagePositionAssociation).filter(
                            and_(ImagePositionAssociation.image_id == new_image.id, ImagePositionAssociation.position_id == position_id)
                        ).first()

                        if existing_association is None:
                            logger.info("Creating a new ImagePositionAssociation entry")
                            image_position_association = ImagePositionAssociation(
                                image_id=new_image.id,
                                position_id=position_id
                            )
                            session.add(image_position_association)
                            logger.info(f"Created ImagePositionAssociation with image ID {new_image.id} and position ID {position_id}")

                    # Step 8: Handle completed document associations
                    if completed_document_position_association_id:
                        logger.info("Creating a new ImageCompletedDocumentAssociation entry")
                        image_completed_document_association = ImageCompletedDocumentAssociation(
                            image_id=new_image.id,
                            completed_document_position_association_id=completed_document_position_association_id
                        )
                        session.add(image_completed_document_association)
                        logger.info(f"Created ImageCompletedDocumentAssociation with image ID {new_image.id} and completed document position association ID {completed_document_position_association_id}")

                    # Step 9: Commit all the changes to the database
                    session.commit()

            except Exception as e:
                # Log the error in the failed_uploads.txt file and handle exceptions
                logger.error(f"An error occurred while processing the image: {e}")
                error_file_path = os.path.join(DATABASE_PATH_IMAGES_FOLDER, 'failed_uploads.txt')
                with open(error_file_path, 'a') as error_file:
                    error_file.write(f"Error processing image with title '{title}': {e}\n")

            # Log completion and return the ID before closing the session
            logger.info(f"Completed processing for image: {title}, ID: {new_image_id}")
            return new_image_id

    except Exception as e:
        # Handle exceptions and log them appropriately
        logger.error(f"An error occurred in add_image_to_db: {e}")
        logger.error(f"Attempted to process image: {title}")
        error_file_path = os.path.join(DATABASE_PATH_IMAGES_FOLDER, 'failed_uploads.txt')
        with open(error_file_path, 'a') as error_file:
            error_file.write(f"Error processing image with title '{title}': {e}\n")

        return None  # Return None or an appropriate error code if an exception occurs
